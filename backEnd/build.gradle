plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.sonarqube' version '4.0.0.2929'
}

sonarqube {
    properties {
        property "sonar.projectKey", System.getenv('SONAR_PROJECT_KEY')
        property "sonar.host.url", System.getenv('SONAR_HOST_URL')
        property "sonar.login", System.getenv('SONAR_LOGIN')
    }
}

group = 'com.6quiz'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

ext {
    springCloudVersion = '2023.0.1'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


dependencies {

    // ⭐ Spring Basic Setting
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    compileOnly 'org.projectlombok:lombok'
    implementation group: 'org.springframework', name: 'spring-aop', version: '6.1.6'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // ⭐ Database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // ⭐ Firebase
    implementation 'com.google.firebase:firebase-admin:9.1.1'

    // ⭐ Jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    // ⭐ SWAGGER
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // ⭐ AWS
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // ⭐ QueryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // ⭐ MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    // ⭐ JWT (현: 0.11.5  -> 0.12.3 migration 예정)
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // ⭐ feign Client
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // ⭐ Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    // ⭐ WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // ⭐ kafka
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.kafka:kafka-clients'
    implementation 'org.springframework.retry:spring-retry'

    // K-means 클러스터링 라이브러리
    implementation 'org.apache.commons:commons-math3:3.6.1'

    // 행렬 연산
    implementation 'org.ejml:ejml-simple:0.41'

}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'jasypt.encryptor.key', findProperty("jasypt.encryptor.key")
}

//Q객체 저장위치
def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
    main.java.srcDirs += [querydslDir]
}
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
    options.compilerArgs << "-parameters"
}
clean {
    delete file(querydslDir)
}